#!/bin/sh


if [ $# != 1 ]; then
    echo "Usage: $0 prepare|perform"
    exit 1
fi


function getVersionToRelease {
    CURRENT_VERSION=`mvn ${MVN_ARGS} org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -v "\[INFO\]"`
    echo ${CURRENT_VERSION%%-SNAPSHOT}
}

function getVersion {
    mvn ${MVN_ARGS} org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -v "\[INFO\]"    
}
function getBranch {
    git symbolic-ref --short HEAD
}

case $1 in
prepare)        
    VERSION=$(getVersionToRelease)
    RELEASE_BRANCH="release/$VERSION"        
    git checkout -b ${RELEASE_BRANCH} || exit 1

    echo "-- Prepare the code for release ${VERSION} in branch ${RELEASE_BRANCH} --"
    echo $VERSION > .version
    git add .version    
    ./bump_release.sh code $VERSION || exit 1
    
    git commit -m "Prepare the code for release ${VERSION}" -a
    git push origin ${RELEASE_BRANCH} || exit 1
    git checkout develop
    echo "Branch $RELEASE_BRANCH is ready for the releasing process"
    ;;
perform)    
    if [ $(hostname) != "btrp" ]; then
            echo "This script must be executed on btrp.inria.fr"
            exit 1
    fi    
    VERSION=$(cat .version)
        
    echo "-- Prepare the release --"
    mvn -B release:prepare || exit 1

    echo "-- Perform the release --"
    mvn release:perform || exit 1

    #echo "-- Push the changes and the tags --"
    git push
    git push origin --tags
    
    # merge the version changes back into develop so that folks are working against the new release 
    echo "-- Integrate the next version into the develop branch --"
    git checkout develop
    NEW_VERSION=$(getVersion)
    git merge --no-ff -m "integrate the development version ${NEW_VERSION} generated by maven" remotes/origin/release/$VERSION || exit 1        
    ./bump_release.sh code ${NEW_VERSION}
    git commit -m "code prepared for development version ${NEW_VERSION}" -a

    # housekeeping -- rewind the release branch by one commit to fix its version at $VERSION
    #   excuse the force push, it's because maven will have already pushed the next dev version
    #   to origin with this branch, and I don't want that version (or a diverging revert commit)
    #   in the release or master branches.
    echo "-- Remove ${NEW_VERSION} from the release branch --"
    git checkout release/$VERSION
    git reset --hard HEAD~1 || exit 1
    git push --force origin release/$VERSION || exit 1
         
    echo "-- Generate the javadoc for release ${VERSION} --"
    mvn javadoc:aggregate > /dev/null
    APIDOC_ROOT="/usr/share/nginx/html/apidocs/releases/btrplace/solver/"
    mkdir -p $APIDOC_ROOT > /dev/null
    rm -rf ${APIDOC_ROOT}/${VERSION}
    mv target/site/apidocs ${APIDOC_ROOT}/${VERSION}


    # finally, if & when the code gets deployed to production
    echo "-- Integrate release ${VERSION} into the master branch --"
    git checkout master || exit 1
    git merge --no-ff -m "integrate the release" remotes/origin/release/$VERSION
#    git branch -d release/$VERSION || exit 1
    git push
#    git push origin :release/$VERSION

    echo "-- Notify the website for release ${VERSION} --"
    ./bump_release.sh site ${VERSION}
    ;;
esac
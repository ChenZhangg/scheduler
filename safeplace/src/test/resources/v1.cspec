/*
* Specification of constraints in BtrPlace.
*
* Built-in functions:
* - vmState(vm) -> vmState
*   get the state of a vm (running, sleeping, ready, terminated)
* - nodeState(node) -> nodeState
*   get the state of a node (online, offline)
* - host(vm) -> node
*   get the node that is currently hosting the given vm
* - running(node) -> set<vm>
*   get the VMs running on the given node
* - sleeping(node) -> set<vm>
*   get the VMs sleeping on the given node
* - hosted(node) -> set<vm>
*   get all the VMs on the given node (i.e) running() + sleeping()
* - colocated(vm) -> set<vm>
*   get all the VMs running on the same node than the given vm (include)
* - card(set<?>) -> int
*   get the number of elements in the given set
* - sum(set<int>) -> int
*   returns the sum
* - P(set<?>) -> set<set<set<?>>>
*   return every possible disjoint subsets (every partitions but without necessarily a complete covering)
*
*
* '$' before a function call indicates we want the initial value of the function (before the reconfiguration starts)
* the weird string below the signature is the constraint marshalling. Ignored by the parser but necessary to instantiate
* the constraint in BtrPlace from its JSON serialisation.
*/

cstr ban(vs <: vms, ns <: nodes, cont: bool) ::=
    """ {"id":"ban", "vms":@vs, "nodes":@ns, "continuous": @cont} """
    !(v : vs) vmState(v) = running --> host(v) /: ns

cstr cumulatedRunningCapacity(ns <: nodes, nb : int, cont: bool) ::=
        """{"id":"cumulatedRunningCapacity","nodes":@ns,"continuous":@con,"amount":@nb} """
        sum({card(running(n)). n : ns}) <= nb

cstr fence(vs <: vms, ns <: nodes, cont: bool) ::=
    """ {"id":"fence", "vms":@vs, "nodes":@ns, "continuous": @cont} """
    !(v : vs) vmState(v) = running --> host(v) : ns

cstr gather(vs <: vms, cont: bool) ::=
    """ {"id":"gather",  "vms":@vs, "continuous": @cont} """
    !(x,y : vs)  (x /= y & vmState(x) = running & vmState(y) = running) --> host(x) = host(y)

cstr lonely (vs <: vms, cont: bool) ::=
    """ {"id":"lonely", "vms":@vs, "continuous" : @cont} """
	!(i : vs) vmState(i) = running --> (colocated(i) - {i}) /<: vs

cstr offline(ns <: nodes) ::=
    """ {"id":"offline",  "nodes":@ns} """
    !(n : ns) nodeState(n) = offline --> card(hosted(n)) = 0

cstr online(ns <: nodes) ::=
    """ {"id": "online", "nodes": @ns} """
    !(n : ns) nodeState(n) = online

cstr running(vs <: vms) ::=
    """ {"id": "running", "vms": @vs} """
    !(v : vs) vmState(v) = running --> (host(v) : nodes & nodeState(host(v)) = online)

cstr ready(vs <: vms) ::=
    """ {"id": "ready", "vms": @vs} """
    !(v : vs) vmState(v) = ready --> host(v) = none

cstr sleeping(vs <: vms) ::=
    """ {"id": "sleeping", "vms": @vs} """
    !(v : vs) vmState(v) = sleeping --> (host(v) : nodes & nodeState(host(v)) = online)

cstr terminated(vs <: vms) ::=
    """ {"id": "terminated", "vms": @vs} """
    !(v : vs) vmState(v) = terminated --> host(v) = none

cstr root (vs <: vms) ::=
    """ {"id":"root", "vms":@vs} """
    !(v : vs) vmState(v) = running --> $host(v) = host(v)

cstr singleRunningCapacity(ns <: nodes, nb : int, cont: bool) ::=
    """{"id":"singleRunningCapacity","nodes":@ns,"continuous":@cont,"amount":@nb} """
	!(n : ns) card(running(n)) <= nb

cstr spread(vs <: vms, cont: bool) ::=
    """ {"id":"spread",  "vms":@vs, "continuous": @cont} """
     !(x,y : vs) (x /= y &  vmState(x) = running & vmState(y) = running) --> host(x) /= host(y)

cstr quarantine(ns <: nodes, cont: bool) ::=
    """ {"id":"quarantine",  "ns":@ns, "continuous": @cont} """
     !(n : ns) !(v : hosted(n)) root(v) & ban({hosted(n2). n2 /: ns})

cstr preserve(vs <: vms, id : string, qty: int, cont: bool) ::=
    """ {"id": "preserve", "vms": @vs, "rc":@id, "amount":@qty, "continuous": @cont} """
    !(v : vs) vmState(v) = running --> cons(v, id) <= qty

cstr singleResourcecapacity(ns <: nodes, id : string, qty: int, cont : bool) ::=
    """ {"id": "singleResourceCapacity", "nodes": @ns, "rc":@id, "amount":@qty, "continuous": @cont} """
    !(n : ns) nodeState(n) = online --> capa(n, id) <= qty

cstr cumulatedResourcecapacity(ns <: nodes, id : string, qty: int, cont : bool) ::=
    """ {"id": "cumulatedResourceCapacity", "nodes": @ns, "rc":@id, "amount":@qty, "continuous": @cont} """
    sum({capa(i, id). i : ns}) <= qty

cstr overbook(ns <: nodes, id : string, qty: float, cont : bool) ::=
    """ {"id": "overbook", "nodes": @ns, "rc":@id, "amount":@qty, "continuous": bool} """
    !(n : ns) sum({cons(v, id). v : running(n)}) * qty < capa(n, id)

cstr maxOnline(ns <: nodes, nb : int, cont: bool) ::=
    """ {"id":"maxOnline","nodes":@ns,"amount":@nb,"continuous":@cont} """
   	card({i. i : ns , nodeState(i) = online}) <= nb

cstr among (vs <: vms, groups : P(nodes), cont: bool) ::=
    """ {"id":"among", "nodes":@groups, "continuous" : @cont} """
    ?(g : groups) {host(i). i : vs, vmState(i) = running} <: g

cstr split(part : P(vms), cont: bool) ::=
    """ {"id":"split", "vms":@part, "continuous" : @cont} """
    { {host(v). v : p , vmState(v) = running}. p : part} : P(nodes)

cstr splitAmong(vs : P(vms), part : P(nodes), cont: bool) ::=
    """ {"id":"splitAmong", "vms":@vs, "nodes":@part, "continuous" : @cont} """
    !(p : part) among(vs, p) & split(vs)

cstr seq(sched : lists(vms)) ::=
    """ {"id": "sequentialVMTransitions", "vms": @sched} """
    !(i,j : range(sched)) (i /= j & vmState(sched[i]) : {booting, suspending, resuming, halting}) -->
        (
        vmState(sched[j]) : {running, sleeping, ready, terminated} &
        ((j < i & vmState(sched[j]) /= $vmState(sched[j])) | (j > i & vmState(sched[j]) = $vmState(sched[j])))
        )
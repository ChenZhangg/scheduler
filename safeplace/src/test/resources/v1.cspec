cstr ban(vs <: vm, ns <: node ) ::=
    """ {"id":"ban", "vms":@vs, "nodes":@ns} """
    !(v : vs) vmState(v) = running --> host(v) /: ns

cstr cumulatedRunningCapacity(ns <: node, nb : int) ::=
        """{"id":"cumulatedRunningCapacity","nodes":@ns,"continuous":false,"amount":@nb} """
        sum({card(running(n)). n : ns}) <= nb

cstr fence(vs <: vm, ns <: node ) ::=
    """ {"id":"fence", "vms":@vs, "nodes":@ns} """
    !(v : vs) vmState(v) = running --> host(v) : ns

cstr gather(vs <: vm) ::=
    """ {"id":"gather",  "vms":@vs, "continuous": false} """
    !(x,y : vs)  (x /= y & vmState(x) = running & vmState(y) = running) --> host(x) = host(y)

cstr lonely (vs <: vm) ::=
    """ {"id":"lonely", "vms":@vs, "continuous" : false} """
	!(i : vs) vmState(i) = running --> (colocated(i) - {i}) /<: vs

cstr offline(ns <: node) ::=
    """ {"id":"offline",  "nodes":@n} """
    !(n : ns) nodeState(n) = offline --> card(hosted(n)) = 0

cstr online(ns <: node) ::=
    """ {"id": "online", "nodes": @n} """
    !(n : ns) nodeState(n) = online

cstr running(vs <: vm) ::=
    """ {"id": "running", "vms": @vs} """
    !(v : vs) vmState(v) = running --> (host(v) : node & nodeState(host(v)) = online)

cstr ready(vs <: vm) ::=
    """ {"id": "ready", "vms": @vs} """
    !(v : vs) vmState(v) = ready --> host(v) /: node

cstr sleeping(vs <: vm) ::= 
    """ {"id": "sleeping", "vms": @vs} """
    !(v : vs) vmState(v) = sleeping --> (host(v) : node & nodeState(host(v)) = online)

cstr terminated(vs <: vm) ::=
    """ {"id": "terminated", "vms": @vs} """
    !(v : vs) vmState(v) = terminated --> host(v) /: node

cstr root (vs <: vm) ::=
    """ {"id":"root", "vms":@vs} """
    !(v : vs) vmState(v) = running --> $host(v) = host(v)

cstr singleRunningCapacity(ns <: node, nb : int) ::=
    """{"id":"singleRunningCapacity","nodes":@ns,"continuous":false,"amount":@nb} """
	!(n : ns) card(running(n)) <= nb

cstr spread(vs <: vm) ::=
    """ {"id":"spread",  "vms":@vs, "continuous": false} """
     !(x,y : vs) (x /= y &  vmState(x) = running & vmState(y) = running) --> host(x) /= host(y)

cstr quarantine(ns <: node) ::=
    """ {"id":"quarantine",  "ns":@ns, "continuous": false} """
     !(n : ns) !(v : hosted(n)) root(v) & ban({hosted(n2). n2 /: ns})

cstr preserve(vs <: vm, id : string, qty: int) ::=
    """ {"id": "preserve", "vms": @vs, "rc":@id, "amount":@qty} """
    !(v : vs) vmState(v) = running --> cons(v, id) <= qty

cstr singleResourcecapacity(ns <: node, id : string, qty: int) ::=
    """ {"id": "singleResourceCapacity", "nodes": @ns, "rc":@id, "amount":@qty} """
    !(n : ns) nodeState(n) = online --> capa(n, id) <= qty

cstr cumulatedResourcecapacity(ns <: node, id : string, qty: int) ::=
    """ {"id": "cumulatedResourceCapacity", "nodes": @ns, "rc":@id, "amount":@qty} """
    sum({capa(i, id). i : ns}) <= qty

cstr overbook(ns <: node, id : string, qty: real) ::=
    """ {"id": "overbook", "nodes": @ns, "rc":@id, "amount":@qty} """
    !(n : ns) sum({cons(v, id). v : running(n)}) * qty < capa(n, id)

cstr maxOnline(ns <: node, nb : int) ::=
    """ {"id":"maxOnline","nodes":@ns,"amount":@nb,"continuous":false} """
   	card({i. i : ns & nodeState(i) = online}) <= nb

cstr among (vs <: vm, groups <: P(node)) ::=
    """ {"id":"among", "nodes":@ns, "continuous" : false} """
    ?(g : groups) {host(i). i : vs & vmState(i) = running} : g

/*cstr split(part <: P(vm)) ::=
    """ {"id":"split", "vms":@vs, "continuous" : true} """

*/
cstr splitAmong(vs <: P(vm), part <: P(node)) ::=
    """ {"id":"splitAmong", "vms":@vs, "nodes":@ns, "continuous" : true} """
    !(p : part) among(vs, p) & split(vs)

